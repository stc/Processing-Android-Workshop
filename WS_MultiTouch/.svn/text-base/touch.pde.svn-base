// Detecting multi-touch events

float mX;
float mY;

GestureDetector dt;

/****************************************************************************************/
void setup() { 
  strokeWeight(2);
  textSize(20);
  noFill();
  dt = new GestureDetector();
}

/****************************************************************************************/
void draw() {
  background(0);
  dt.drawPoints();
} 

/****************************************************************************************/
boolean surfaceTouchEvent(MotionEvent event) {
  dumpEvent(event);

  int action = event.getAction();
  int code = action & MotionEvent.ACTION_MASK;
  int index = action >> MotionEvent.ACTION_POINTER_ID_SHIFT;

  switch(code) {
  case MotionEvent.ACTION_DOWN:
    println("first finger");
  case MotionEvent.ACTION_POINTER_DOWN:        
    float x = event.getX(index);
    float y = event.getY(index);
    int pid = event.getPointerId(index);
    dt.add(pid, x, y);
    break;

  case MotionEvent.ACTION_UP:
    println("first finger up");
  case MotionEvent.ACTION_POINTER_UP: 
    dt.remove(event.getPointerId(index));
    break;

  case MotionEvent.ACTION_MOVE:
    int numPointers = event.getPointerCount();
    for (int i=0; i < numPointers; i++) {
      int id = event.getPointerId(i);
      float x = event.getX(i);
      float y = event.getY(i);
      dt.update(id, x, y);
    }
  }



  return super.surfaceTouchEvent(event);
}

/****************************************************************************************/
TouchPoint findTouchPointWithID(int id) {

  return null;
}


/****************************************************************************************/
void dumpEvent(MotionEvent event) {
  String names[] = { 
    "DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE", 
    "POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?"
  };
  StringBuilder sb = new StringBuilder();
  int action = event.getAction();
  int actionCode = action & MotionEvent.ACTION_MASK;
  sb.append("event ACTION_" ).append(names[actionCode]);
  if (actionCode == MotionEvent.ACTION_POINTER_DOWN
    || actionCode == MotionEvent.ACTION_POINTER_UP) {
    sb.append("(idx " ).append(
    action >> MotionEvent.ACTION_POINTER_ID_SHIFT);
    sb.append(")" );
  }
  sb.append(" [" );
  for (int i = 0; i < event.getPointerCount(); i++) {
    sb.append("#" ).append(i);
    sb.append("(pid " ).append(event.getPointerId(i));
    sb.append(")=" ).append((int) event.getX(i));
    sb.append("," ).append((int) event.getY(i));
    if (i + 1 < event.getPointerCount())
      sb.append(";" );
  }
  sb.append("]" );
  println(sb.toString());
}


/****************************************************************************************/
class GestureDetector {

  Vector touchPoints;

  GestureDetector() {
    touchPoints = new Vector();
  }

  synchronized void add(int pid, float x, float y) {
    touchPoints.add(new TouchPoint(x, y, pid));
  }

  synchronized TouchPoint get(int pid) {
    Iterator i = touchPoints.iterator();
    while (i.hasNext ()) {
      TouchPoint tp = (TouchPoint)i.next();
      if (tp.id == pid) return tp;
    }
    return null;
  }

  synchronized void remove(int pid) {
    TouchPoint tp = get(pid);
    touchPoints.remove(tp);
  }
  
  synchronized void drawPoints() {
    Iterator i = touchPoints.iterator();
    while (i.hasNext ()) {
      TouchPoint tp = (TouchPoint)i.next();
      tp.render();
    }
  }
  
  void update(int pid, float x, float y) {
    TouchPoint tp = get(pid);
    tp.update(x, y);
  }
}

/****************************************************************************************/
class TouchPoint {
  float x;
  float y;
  float px; 
  float py;
  int id;

  boolean locked;

  TouchPoint(float x, float y, int id) {
    this.x = x;
    this.y = y;
    this.px = x;
    this.py = y;
    this.id = id;
  }  

  void update(float x, float y) {
    px = this.x;
    py = this.y;
    this.x = x;
    this.y = y;
  }

  void render() { 
    float diameter = 50;
    stroke(255);
    noFill();
    ellipse(x, y, diameter, diameter);
    fill(0, 255, 0);
    ellipse(x, y, 8, 8);
    text( ("ID:"+ id + " " + int(x) + ", " + int(y) ), x-128, y-64);
  }
}

